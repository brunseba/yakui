import React, { useState } from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  Chip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Alert,
  LinearProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Grid,
  Paper,
  IconButton,
  Tooltip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Divider,
  Stack
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Schedule as ScheduleIcon,
  Dashboard as DashboardIcon,
  AccountTree as AccountTreeIcon,
  Dns as DnsIcon,
  Apps as AppsIcon,
  Extension as ExtensionIcon,
  Security as SecurityIcon,
  Monitor as MonitorIcon,
  Shield as ShieldIcon,
  Settings as SettingsIcon,
  Tune as TuneIcon,
  Storage as StorageIcon,
  ExpandMore as ExpandMoreIcon,
  Info as InfoIcon,
  Code as CodeIcon,
  Timeline as TimelineIcon,
  BugReport as BugReportIcon,
  Star as StarIcon,
  Warning as WarningIcon,
  Build as BuildIcon,
  Layers as LayersIcon
} from '@mui/icons-material';

interface FeatureItem {
  id: number;
  name: string;
  status: 'implemented' | 'partial' | 'coming-soon';
  description: string;
  icon: React.ReactElement;
  paths?: string[];
  progress?: number; // 0-100
  components?: string[];
  apiEndpoints?: string[];
  features?: string[];
  technicalDetails?: {
    backend: string[];
    frontend: string[];
    dependencies?: string[];
  };
  lastUpdated?: string;
  version?: string;
  priority?: 'high' | 'medium' | 'low';
  complexity?: 'low' | 'medium' | 'high';
  estimatedTime?: string;
  blockers?: string[];
  changelog?: {
    version: string;
    date: string;
    changes: string[];
  }[];
}

const features: FeatureItem[] = [
  {
    id: 1,
    name: 'Dashboard',
    status: 'implemented',
    progress: 100,
    description: 'Real-time cluster overview with metrics, events, and health status',
    icon: <DashboardIcon />,
    paths: ['/dashboard'],
    components: ['pages/Dashboard.tsx', 'components/system/SystemStatus.tsx'],
    apiEndpoints: ['/api/auth/login', '/api/nodes', '/api/namespaces', '/api/events'],
    features: ['Cluster statistics cards', 'Node health monitoring', 'Recent events list', 'Feature status overview', 'Cluster information display'],
    technicalDetails: {
      backend: ['Kubernetes client integration', 'Real-time cluster data', 'Event streaming'],
      frontend: ['React functional components', 'Material-UI stat cards', 'Real-time data fetching'],
      dependencies: ['@kubernetes/client-node', '@mui/material', '@tanstack/react-query']
    },
    lastUpdated: '2025-09-20',
    version: '1.0.0',
    priority: 'high',
    complexity: 'medium'
  },
  {
    id: 2,
    name: 'Cluster Management',
    status: 'implemented',
    progress: 90,
    description: 'Node management and cluster topology visualization',
    icon: <AccountTreeIcon />,
    paths: ['/cluster/nodes', '/cluster/topology'],
    components: ['cluster/NodesManager.tsx', 'cluster/ClusterTopology.tsx'],
    apiEndpoints: ['/api/nodes'],
    features: ['Node listing', 'Node health status', 'Cluster topology view', 'Node resource information'],
    technicalDetails: {
      backend: ['Node API integration', 'Health status monitoring'],
      frontend: ['Node management interface', 'Topology visualization', 'Material-UI components'],
      dependencies: ['@kubernetes/client-node', '@mui/material']
    },
    lastUpdated: '2025-09-20',
    version: '1.0.0',
    priority: 'high',
    complexity: 'medium'
  },
  {
    id: 3,
    name: 'Namespace Management',
    status: 'implemented',
    progress: 100,
    description: 'Complete namespace management with detailed views and metrics',
    icon: <DnsIcon />,
    paths: ['/namespaces'],
    components: ['namespaces/NamespaceManager.tsx', 'namespaces/NamespaceDetail.tsx'],
    apiEndpoints: ['/api/namespaces', '/api/namespaces/:name'],
    features: ['Namespace listing', 'Namespace creation/deletion', 'Resource metrics', 'Pod and service counts', 'Detailed namespace views'],
    technicalDetails: {
      backend: ['Full namespace API', 'Resource counting', 'Detailed namespace info'],
      frontend: ['Namespace cards interface', 'Detail modal views', 'Creation dialogs'],
      dependencies: ['@kubernetes/client-node', '@mui/material']
    },
    lastUpdated: '2025-09-20',
    version: '1.0.0',
    priority: 'high',
    complexity: 'medium'
  },
  {
    id: 4,
    name: 'Resource Management',
    status: 'implemented',
    progress: 100,
    description: 'Complete Kubernetes resource management with YAML editor and Helm chart support',
    icon: <AppsIcon />,
    paths: ['/resources'],
    components: ['resources/ResourceManager.tsx', 'resources/ResourceDetail.tsx', 'helm/HelmManager.tsx'],
    apiEndpoints: ['/api/resources/*', '/api/helm/*'],
    features: ['Deployments/Services/Pods/ConfigMaps/Secrets management', 'YAML editor with Monaco', 'Resource creation from templates', 'Helm repository management', 'Helm chart search and installation', 'Release management with history'],
    technicalDetails: {
      backend: ['Full resource CRUD APIs', 'Helm CLI integration', 'Resource creation endpoints', 'Pod logs streaming'],
      frontend: ['Tabbed resource interface', 'Monaco YAML editor', 'Helm management UI', 'Installation forms'],
      dependencies: ['@monaco-editor/react', 'js-yaml', '@kubernetes/client-node']
    },
    lastUpdated: '2025-09-20',
    version: '2.0.0',
    priority: 'high',
    complexity: 'high',
    changelog: [
      {
        version: '2.0.0',
        date: '2025-09-20',
        changes: ['Added comprehensive Helm management', 'Resource creation workflow', 'Enhanced YAML editor']
      }
    ]
  },
  {
    id: 5,
    name: 'Custom Resources (CRDs)',
    status: 'implemented',
    progress: 85,
    description: 'Custom Resource Definition management with detailed schema views',
    icon: <ExtensionIcon />,
    paths: ['/crds'],
    components: ['crds/CRDManager.tsx', 'crds/CRDDetail.tsx'],
    apiEndpoints: ['/api/crds', '/api/crds/:name'],
    features: ['CRD listing and discovery', 'Schema inspection', 'Instance counting', 'Detailed CRD information'],
    technicalDetails: {
      backend: ['CRD API integration', 'Schema parsing', 'Instance discovery'],
      frontend: ['CRD management interface', 'Detail views', 'Schema display'],
      dependencies: ['@kubernetes/client-node', '@mui/material']
    },
    lastUpdated: '2025-09-20',
    version: '1.0.0',
    priority: 'medium',
    complexity: 'medium'
  },
  {
    id: 6,
    name: 'RBAC Management',
    status: 'partial',
    progress: 60,
    description: 'Role-Based Access Control management with enhanced interface',
    icon: <SecurityIcon />,
    paths: ['/rbac/users', '/rbac/roles', '/rbac/bindings'],
    components: ['rbac/RBACManager.tsx', 'rbac/EnhancedRBACManager.tsx'],
    apiEndpoints: [],
    features: ['Service account forms', 'Role creation interface', 'Permission matrix display', 'RBAC visualization'],
    technicalDetails: {
      backend: ['RBAC API stubs (not fully connected)'],
      frontend: ['Enhanced RBAC forms', 'Permission management UI', 'Interactive components'],
      dependencies: ['@mui/material', '@kubernetes/client-node']
    },
    lastUpdated: '2025-09-20',
    version: '1.0.0',
    priority: 'high',
    complexity: 'high',
    blockers: ['Backend RBAC API endpoints need implementation', 'Kubernetes RBAC permissions integration needed']
  },
  {
    id: 7,
    name: 'Monitoring Dashboard',
    status: 'implemented',
    progress: 90,
    description: 'Comprehensive monitoring with events, logs, metrics, and health status',
    icon: <MonitorIcon />,
    paths: ['/monitoring/events', '/monitoring/logs', '/monitoring/metrics'],
    components: ['monitoring/MonitoringDashboard.tsx'],
    apiEndpoints: ['/api/events', '/api/resources/pod/:namespace/:name/logs'],
    features: ['Real-time cluster events with filtering', 'Pod log streaming with auto-refresh', 'Sample metrics visualization', 'System health overview', 'Event statistics'],
    technicalDetails: {
      backend: ['Events API integration', 'Pod logs API', 'Sample metrics generation'],
      frontend: ['Tabbed monitoring interface', 'Recharts integration', 'Real-time log viewer', 'Event filtering'],
      dependencies: ['recharts', '@mui/material', '@kubernetes/client-node']
    },
    lastUpdated: '2025-09-20',
    version: '1.0.0',
    priority: 'medium',
    complexity: 'medium'
  },
  {
    id: 8,
    name: 'Security Dashboard',
    status: 'implemented',
    progress: 85,
    description: 'Security scanning, vulnerability assessment, and compliance checking',
    icon: <ShieldIcon />,
    paths: ['/security', '/security/scanning', '/security/compliance'],
    components: ['SecurityDashboard.tsx'],
    features: ['Container security validation', 'Image security checks', 'Compliance framework support', 'Security recommendations', 'Policy validation'],
    technicalDetails: {
      backend: ['Security validation rules', 'Compliance frameworks integration'],
      frontend: ['Security overview cards', 'Compliance checking interface', 'Vulnerability reports'],
      dependencies: ['@mui/material']
    },
    lastUpdated: '2025-09-20',
    version: '1.0.0',
    priority: 'medium',
    complexity: 'medium'
  },
  {
    id: 9,
    name: 'Storage Management',
    status: 'coming-soon',
    progress: 0,
    description: 'Manage persistent volumes, PVCs, and storage classes',
    icon: <StorageIcon />,
    paths: ['/storage/persistent-volumes', '/storage/persistent-volume-claims', '/storage/storage-classes'],
    features: ['Persistent Volume management', 'PVC monitoring', 'Storage class configuration', 'Volume usage tracking'],
    priority: 'low',
    complexity: 'medium',
    estimatedTime: '2-3 weeks',
    blockers: ['Storage API endpoints needed', 'Volume metrics integration required']
  },
  {
    id: 10,
    name: 'Authentication System',
    status: 'implemented',
    progress: 95,
    description: 'Multi-method Kubernetes authentication with session management',
    icon: <SecurityIcon />,
    paths: ['/login'],
    components: ['auth/Login.tsx', 'contexts/AuthContext.tsx'],
    apiEndpoints: ['/api/auth/login'],
    features: ['Kubeconfig authentication', 'Token-based auth', 'Session persistence', 'Cluster context management'],
    technicalDetails: {
      backend: ['Kubernetes authentication', 'Session management', 'Cluster connection testing'],
      frontend: ['Login forms', 'Auth context provider', 'Protected routes'],
      dependencies: ['@kubernetes/client-node', '@tanstack/react-query']
    },
    lastUpdated: '2025-09-20',
    version: '1.0.0',
    priority: 'high',
    complexity: 'medium'
  },
  {
    id: 11,
    name: 'Error Handling & Validation',
    status: 'implemented',
    progress: 90,
    description: 'Comprehensive error boundaries and input validation system',
    icon: <WarningIcon />,
    paths: ['/'],
    components: ['common/ErrorBoundary.tsx', 'contexts/ValidationContext.tsx', 'utils/validation.ts'],
    features: ['Global error boundaries', 'Kubernetes-aware validation', 'Input sanitization', 'Error reporting'],
    technicalDetails: {
      backend: ['Error handling utilities', 'Validation rules'],
      frontend: ['React error boundaries', 'Validation context', 'User-friendly error display'],
      dependencies: ['@mui/material']
    },
    lastUpdated: '2025-09-20',
    version: '1.0.0',
    priority: 'high',
    complexity: 'medium'
  },
  {
    id: 12,
    name: 'Coming Soon Features',
    status: 'coming-soon',
    progress: 0,
    description: 'Future enhancements: Storage management, Advanced networking, GitOps integration',
    icon: <BuildIcon />,
    paths: ['/storage/*', '/configuration/*', '/resources/quotas'],
    features: ['Storage management', 'ConfigMap/Secret management', 'Resource quotas', 'Network policies', 'GitOps workflows'],
    priority: 'low',
    complexity: 'high',
    estimatedTime: '8-12 weeks',
    blockers: ['Storage API integration', 'Additional Kubernetes API endpoints', 'Advanced feature planning']
  }
];

interface FeatureStatusProps {
  title?: string;
  showOnlyStatus?: 'implemented' | 'partial' | 'coming-soon';
  detailedView?: boolean;
}

const FeatureStatus: React.FC<FeatureStatusProps> = ({ 
  title = "Kubernetes Admin UI - Feature Status", 
  showOnlyStatus,
  detailedView = false
}) => {
  const [selectedFeature, setSelectedFeature] = useState<FeatureItem | null>(null);
  const [detailDialogOpen, setDetailDialogOpen] = useState(false);
  const [expandedAccordion, setExpandedAccordion] = useState<string | false>(false);

  const filteredFeatures = showOnlyStatus 
    ? features.filter(f => f.status === showOnlyStatus)
    : features;

  const implementedCount = features.filter(f => f.status === 'implemented').length;
  const partialCount = features.filter(f => f.status === 'partial').length;
  const totalCount = features.length;
  const overallProgress = Math.round(features.reduce((sum, f) => sum + (f.progress || 0), 0) / totalCount);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'implemented': return 'success';
      case 'partial': return 'warning';
      case 'coming-soon': return 'default';
      default: return 'default';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'implemented': return <CheckCircleIcon />;
      case 'partial': return <BuildIcon />;
      case 'coming-soon': return <ScheduleIcon />;
      default: return <ScheduleIcon />;
    }
  };

  const getPriorityColor = (priority?: string) => {
    switch (priority) {
      case 'high': return 'error';
      case 'medium': return 'warning';
      case 'low': return 'info';
      default: return 'default';
    }
  };

  const handleFeatureClick = (feature: FeatureItem) => {
    setSelectedFeature(feature);
    setDetailDialogOpen(true);
  };

  const handleAccordionChange = (panel: string) => (event: React.SyntheticEvent, isExpanded: boolean) => {
    setExpandedAccordion(isExpanded ? panel : false);
  };

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        {title}
      </Typography>
      
      {/* Overall Progress */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">Overall Progress</Typography>
            <Typography variant="h4" color="primary">{overallProgress}%</Typography>
          </Box>
          <LinearProgress 
            variant="determinate" 
            value={overallProgress} 
            sx={{ height: 8, borderRadius: 5, mb: 2 }}
          />
          <Stack direction="row" spacing={1} flexWrap="wrap">
            <Chip 
              icon={<CheckCircleIcon />} 
              label={`${implementedCount} Implemented`} 
              color="success" 
              size="small"
            />
            <Chip 
              icon={<BuildIcon />} 
              label={`${partialCount} Partial`} 
              color="warning" 
              size="small"
            />
            <Chip 
              icon={<ScheduleIcon />} 
              label={`${totalCount - implementedCount - partialCount} Planned`} 
              color="default" 
              size="small"
            />
          </Stack>
        </CardContent>
      </Card>

      {detailedView ? (
        /* Detailed Accordion View */
        <Box>
          {filteredFeatures.map((feature) => (
            <Accordion
              key={feature.id}
              expanded={expandedAccordion === `panel${feature.id}`}
              onChange={handleAccordionChange(`panel${feature.id}`)}
              sx={{ mb: 1 }}
            >
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Box display="flex" alignItems="center" gap={2} width="100%">
                  {feature.icon}
                  <Box flexGrow={1}>
                    <Typography variant="h6">
                      {feature.name}
                    </Typography>
                    <Box display="flex" alignItems="center" gap={1} mt={0.5}>
                      <Chip
                        size="small"
                        icon={getStatusIcon(feature.status)}
                        label={feature.status.charAt(0).toUpperCase() + feature.status.slice(1).replace('-', ' ')}
                        color={getStatusColor(feature.status) as any}
                      />
                      {feature.priority && (
                        <Chip
                          size="small"
                          label={`${feature.priority} priority`}
                          color={getPriorityColor(feature.priority) as any}
                          variant="outlined"
                        />
                      )}
                      {feature.progress !== undefined && (
                        <Box sx={{ minWidth: 100 }}>
                          <LinearProgress 
                            variant="determinate" 
                            value={feature.progress} 
                            sx={{ height: 4, borderRadius: 2 }}
                          />
                        </Box>
                      )}
                    </Box>
                  </Box>
                  <IconButton
                    size="small"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleFeatureClick(feature);
                    }}
                  >
                    <InfoIcon />
                  </IconButton>
                </Box>
              </AccordionSummary>
              <AccordionDetails>
                <Grid container spacing={2}>
                  <Grid item xs={12} md={8}>
                    <Typography variant="body2" paragraph>
                      {feature.description}
                    </Typography>
                    
                    {feature.features && (
                      <Box mb={2}>
                        <Typography variant="subtitle2" gutterBottom>Key Features:</Typography>
                        <Box display="flex" flexWrap="wrap" gap={0.5}>
                          {feature.features.map((feat, idx) => (
                            <Chip key={idx} label={feat} size="small" variant="outlined" />
                          ))}
                        </Box>
                      </Box>
                    )}

                    {feature.components && (
                      <Box mb={2}>
                        <Typography variant="subtitle2" gutterBottom>Components:</Typography>
                        <Box display="flex" flexWrap="wrap" gap={0.5}>
                          {feature.components.map((comp, idx) => (
                            <Chip key={idx} label={comp} size="small" icon={<CodeIcon />} />
                          ))}
                        </Box>
                      </Box>
                    )}

                    {feature.blockers && (
                      <Alert severity="warning" sx={{ mt: 2 }}>
                        <Typography variant="subtitle2">Blockers:</Typography>
                        <ul style={{ margin: 0, paddingLeft: 20 }}>
                          {feature.blockers.map((blocker, idx) => (
                            <li key={idx}>{blocker}</li>
                          ))}
                        </ul>
                      </Alert>
                    )}
                  </Grid>
                  
                  <Grid item xs={12} md={4}>
                    <Paper variant="outlined" sx={{ p: 2 }}>
                      <Typography variant="subtitle2" gutterBottom>Details</Typography>
                      {feature.version && (
                        <Typography variant="body2">Version: {feature.version}</Typography>
                      )}
                      {feature.lastUpdated && (
                        <Typography variant="body2">Updated: {feature.lastUpdated}</Typography>
                      )}
                      {feature.complexity && (
                        <Typography variant="body2">Complexity: {feature.complexity}</Typography>
                      )}
                      {feature.estimatedTime && (
                        <Typography variant="body2">Estimated: {feature.estimatedTime}</Typography>
                      )}
                      {feature.paths && (
                        <Box mt={1}>
                          <Typography variant="caption">Routes:</Typography>
                          {feature.paths.map((path, idx) => (
                            <Typography key={idx} variant="caption" display="block" sx={{ fontFamily: 'monospace' }}>
                              {path}
                            </Typography>
                          ))}
                        </Box>
                      )}
                    </Paper>
                  </Grid>
                </Grid>
              </AccordionDetails>
            </Accordion>
          ))}
        </Box>
      ) : (
        /* Simple List View */
        <List>
          {filteredFeatures.map((feature) => (
            <ListItem 
              key={feature.id}
              button
              onClick={() => handleFeatureClick(feature)}
            >
              <ListItemIcon>
                {feature.icon}
              </ListItemIcon>
              <ListItemText
                primary={
                  <Box display="flex" alignItems="center" gap={1}>
                    <Typography variant="h6">
                      {feature.id}. {feature.name}
                    </Typography>
                    <Chip
                      size="small"
                      icon={getStatusIcon(feature.status)}
                      label={feature.status === 'implemented' ? 'Working' : feature.status === 'partial' ? 'Partial' : 'Coming Soon'}
                      color={getStatusColor(feature.status) as any}
                    />
                    {feature.progress !== undefined && (
                      <Box sx={{ minWidth: 50 }}>
                        <Typography variant="caption">{feature.progress}%</Typography>
                      </Box>
                    )}
                  </Box>
                }
                secondary={
                  <Box>
                    <Typography variant="body2" color="textSecondary">
                      {feature.description}
                    </Typography>
                    {feature.progress !== undefined && (
                      <LinearProgress 
                        variant="determinate" 
                        value={feature.progress} 
                        sx={{ mt: 1, height: 4, borderRadius: 2 }}
                      />
                    )}
                    {feature.paths && (
                      <Box mt={1}>
                        <Typography variant="caption" color="textSecondary">
                          Routes: {feature.paths.join(', ')}
                        </Typography>
                      </Box>
                    )}
                  </Box>
                }
              />
            </ListItem>
          ))}
        </List>
      )}

      {/* Feature Detail Dialog */}
      <Dialog 
        open={detailDialogOpen} 
        onClose={() => setDetailDialogOpen(false)}
        maxWidth="lg"
        fullWidth
      >
        {selectedFeature && (
          <>
            <DialogTitle>
              <Box display="flex" alignItems="center" gap={2}>
                {selectedFeature.icon}
                <Box>
                  <Typography variant="h5">{selectedFeature.name}</Typography>
                  <Box display="flex" alignItems="center" gap={1} mt={1}>
                    <Chip
                      size="small"
                      icon={getStatusIcon(selectedFeature.status)}
                      label={selectedFeature.status.charAt(0).toUpperCase() + selectedFeature.status.slice(1).replace('-', ' ')}
                      color={getStatusColor(selectedFeature.status) as any}
                    />
                    {selectedFeature.priority && (
                      <Chip
                        size="small"
                        label={`${selectedFeature.priority} priority`}
                        color={getPriorityColor(selectedFeature.priority) as any}
                        variant="outlined"
                      />
                    )}
                    {selectedFeature.version && (
                      <Chip size="small" label={`v${selectedFeature.version}`} variant="outlined" />
                    )}
                  </Box>
                </Box>
              </Box>
            </DialogTitle>
            <DialogContent>
              <Grid container spacing={3}>
                <Grid item xs={12} md={8}>
                  <Typography variant="body1" paragraph>
                    {selectedFeature.description}
                  </Typography>

                  {selectedFeature.progress !== undefined && (
                    <Box mb={3}>
                      <Typography variant="h6" gutterBottom>Progress</Typography>
                      <Box display="flex" alignItems="center" gap={2}>
                        <LinearProgress 
                          variant="determinate" 
                          value={selectedFeature.progress} 
                          sx={{ flexGrow: 1, height: 8, borderRadius: 4 }}
                        />
                        <Typography variant="h6">{selectedFeature.progress}%</Typography>
                      </Box>
                    </Box>
                  )}

                  {selectedFeature.features && (
                    <Box mb={3}>
                      <Typography variant="h6" gutterBottom>Features</Typography>
                      <Grid container spacing={1}>
                        {selectedFeature.features.map((feat, idx) => (
                          <Grid item key={idx}>
                            <Chip label={feat} variant="outlined" icon={<StarIcon />} />
                          </Grid>
                        ))}
                      </Grid>
                    </Box>
                  )}

                  {selectedFeature.technicalDetails && (
                    <Box mb={3}>
                      <Typography variant="h6" gutterBottom>Technical Details</Typography>
                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={6}>
                          <Typography variant="subtitle2" gutterBottom>Backend</Typography>
                          <List dense>
                            {selectedFeature.technicalDetails.backend.map((item, idx) => (
                              <ListItem key={idx} sx={{ py: 0 }}>
                                <ListItemText primary={item} />
                              </ListItem>
                            ))}
                          </List>
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <Typography variant="subtitle2" gutterBottom>Frontend</Typography>
                          <List dense>
                            {selectedFeature.technicalDetails.frontend.map((item, idx) => (
                              <ListItem key={idx} sx={{ py: 0 }}>
                                <ListItemText primary={item} />
                              </ListItem>
                            ))}
                          </List>
                        </Grid>
                      </Grid>
                      {selectedFeature.technicalDetails.dependencies && (
                        <Box mt={2}>
                          <Typography variant="subtitle2" gutterBottom>Dependencies</Typography>
                          <Box display="flex" flexWrap="wrap" gap={0.5}>
                            {selectedFeature.technicalDetails.dependencies.map((dep, idx) => (
                              <Chip key={idx} label={dep} size="small" />
                            ))}
                          </Box>
                        </Box>
                      )}
                    </Box>
                  )}

                  {selectedFeature.changelog && (
                    <Box mb={3}>
                      <Typography variant="h6" gutterBottom>Changelog</Typography>
                      {selectedFeature.changelog.map((entry, idx) => (
                        <Card key={idx} variant="outlined" sx={{ mb: 1 }}>
                          <CardContent sx={{ pb: '16px !important' }}>
                            <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                              <Typography variant="subtitle2">v{entry.version}</Typography>
                              <Typography variant="caption">{entry.date}</Typography>
                            </Box>
                            <ul style={{ margin: 0, paddingLeft: 20 }}>
                              {entry.changes.map((change, changeIdx) => (
                                <li key={changeIdx}>
                                  <Typography variant="body2">{change}</Typography>
                                </li>
                              ))}
                            </ul>
                          </CardContent>
                        </Card>
                      ))}
                    </Box>
                  )}

                  {selectedFeature.blockers && (
                    <Alert severity="warning">
                      <Typography variant="subtitle2">Current Blockers</Typography>
                      <ul style={{ margin: '8px 0 0 0', paddingLeft: 20 }}>
                        {selectedFeature.blockers.map((blocker, idx) => (
                          <li key={idx}>{blocker}</li>
                        ))}
                      </ul>
                    </Alert>
                  )}
                </Grid>

                <Grid item xs={12} md={4}>
                  <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                    <Typography variant="h6" gutterBottom>Information</Typography>
                    <TableContainer>
                      <Table size="small">
                        <TableBody>
                          {selectedFeature.lastUpdated && (
                            <TableRow>
                              <TableCell>Last Updated</TableCell>
                              <TableCell>{selectedFeature.lastUpdated}</TableCell>
                            </TableRow>
                          )}
                          {selectedFeature.complexity && (
                            <TableRow>
                              <TableCell>Complexity</TableCell>
                              <TableCell>
                                <Chip label={selectedFeature.complexity} size="small" />
                              </TableCell>
                            </TableRow>
                          )}
                          {selectedFeature.estimatedTime && (
                            <TableRow>
                              <TableCell>Estimated Time</TableCell>
                              <TableCell>{selectedFeature.estimatedTime}</TableCell>
                            </TableRow>
                          )}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Paper>

                  {selectedFeature.components && (
                    <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                      <Typography variant="h6" gutterBottom>Components</Typography>
                      {selectedFeature.components.map((comp, idx) => (
                        <Chip key={idx} label={comp} size="small" sx={{ m: 0.25 }} icon={<CodeIcon />} />
                      ))}
                    </Paper>
                  )}

                  {selectedFeature.apiEndpoints && (
                    <Paper variant="outlined" sx={{ p: 2, mb: 2 }}>
                      <Typography variant="h6" gutterBottom>API Endpoints</Typography>
                      {selectedFeature.apiEndpoints.map((endpoint, idx) => (
                        <Typography key={idx} variant="body2" sx={{ fontFamily: 'monospace', mb: 0.5 }}>
                          {endpoint}
                        </Typography>
                      ))}
                    </Paper>
                  )}

                  {selectedFeature.paths && (
                    <Paper variant="outlined" sx={{ p: 2 }}>
                      <Typography variant="h6" gutterBottom>Routes</Typography>
                      {selectedFeature.paths.map((path, idx) => (
                        <Typography key={idx} variant="body2" sx={{ fontFamily: 'monospace', mb: 0.5 }}>
                          {path}
                        </Typography>
                      ))}
                    </Paper>
                  )}
                </Grid>
              </Grid>
            </DialogContent>
            <DialogActions>
              <Button onClick={() => setDetailDialogOpen(false)}>Close</Button>
            </DialogActions>
          </>
        )}
      </Dialog>
    </Box>
  );
};

export default FeatureStatus;